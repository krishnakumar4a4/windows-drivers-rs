on:
  push:
  pull_request:
  merge_group:
  schedule: # Trigger a job on default branch at 4AM PST everyday
    - cron: "0 11 * * *"

name: Build

env:
  RUSTFLAGS: >-
    -D warnings
    -C target-feature=+crt-static

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        runner:
          - windows-latest
          - windows-11-arm

        wdk:
          - Microsoft.WindowsWDK.10.0.22621 # NI WDK

        llvm:
          - 17.0.6

        rust_toolchain:
          - stable
          - beta
          - nightly

        cargo_profile:
          - dev
          - release

        target_triple:
          - name: x86_64-pc-windows-msvc
            arch: amd64
          - name: aarch64-pc-windows-msvc
            arch: arm64
    
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Winget
        uses: ./.github/actions/winget-install
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install LLVM ${{ matrix.llvm }}
        run: |
          # Use native winget.exe instead of PowerShell module for ARM64 compatibility
          Write-Host "Checking for existing LLVM installation..."
          $installedPackages = winget list --id LLVM.LLVM --exact --accept-source-agreements --disable-interactivity 2>$null
          
          # Check if the exact version is already installed
          if ($installedPackages -match "LLVM\.LLVM.*${{ matrix.llvm }}") {
            Write-Host "LLVM ${{ matrix.llvm }} is already installed."
          } else {
            # If any version of LLVM is installed, uninstall it first
            if ($installedPackages -match "LLVM\.LLVM") {
              # Extract and print the existing version
              $existingVersion = ($installedPackages | Select-String "LLVM\.LLVM").Line
              Write-Host "Found existing LLVM installation ($existingVersion). Uninstalling before installing version ${{ matrix.llvm }}..."
              winget uninstall --id LLVM.LLVM --exact --silent --accept-source-agreements --disable-interactivity
              if ($LASTEXITCODE -ne 0) {
                Write-Host "Warning: Failed to uninstall existing LLVM (exit code: $LASTEXITCODE). Continuing with installation..."
              }
            }
            
            Write-Host "Installing LLVM ${{ matrix.llvm }}..."
            winget install --id LLVM.LLVM --version ${{ matrix.llvm }} --source winget --exact --silent --accept-source-agreements --accept-package-agreements --disable-interactivity
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "LLVM installation failed with exit code: $LASTEXITCODE"
              exit 1
            }
          }
          
          # Verify installation
          if (Get-Command clang -ErrorAction SilentlyContinue) {
            clang --version
          } else {
            Write-Host "Warning: clang command not found in PATH after installation"
          }

      - name: Install WDK (${{ matrix.wdk }})
        run: |
          if ((Get-WinGetPackage -Id ${{ matrix.wdk }} -Source winget -MatchOption Equals).Id -eq '${{ matrix.wdk }}') {
            Write-Host "${{ matrix.wdk }} is already installed. Attempting to update..."
            Update-WinGetPackage -Id ${{ matrix.wdk }} -Source winget -MatchOption Equals -Mode Silent -Force
          } else {
            Write-Host "Installing ${{ matrix.wdk }}..."
            Install-WinGetPackage -Id ${{ matrix.wdk }} -Source winget -MatchOption Equals -Mode Silent -Force
          }

      - name: Install Rust Toolchain (${{ matrix.rust_toolchain }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          targets: |
            ${{ matrix.target_triple.name }}

      - name: Run Cargo Build
        run: cargo +${{ matrix.rust_toolchain }} build --locked --profile ${{ matrix.cargo_profile }} --target ${{ matrix.target_triple.name }} --workspace --all-features

      - name: Install Cargo Make
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-make

      - name: Run Cargo Make (package-driver-flow) in Workspace
        run: cargo make package-driver-flow +${{ matrix.rust_toolchain }} --locked --profile ${{ matrix.cargo_profile }} --target ${{ matrix.target_triple.name }} --workspace

      - name: Build Examples (via Cargo Make)
        run: cargo make --cwd ./examples build +${{ matrix.rust_toolchain }} --locked --profile ${{ matrix.cargo_profile }} --target ${{ matrix.target_triple.name }}

      - name: Package Examples (via Cargo Make)
        run: cargo make --cwd ./examples package-driver-flow +${{ matrix.rust_toolchain }} --locked --profile ${{ matrix.cargo_profile }} --target ${{ matrix.target_triple.name }}

      # Run cargo-wdk on examples
      - name: Install cargo-wdk
        run: cargo +${{ matrix.rust_toolchain }} install --path=crates/cargo-wdk --profile ${{ matrix.cargo_profile }} --locked --force

      - name: Build & Package Examples (via cargo-wdk)
        run: cargo +${{ matrix.rust_toolchain }} wdk build --cwd ./examples --profile ${{ matrix.cargo_profile }} --target-arch ${{ matrix.target_triple.arch }} --sample

      - name: Run build on tests folder (via cargo-wdk)
        run: cargo +${{ matrix.rust_toolchain }} wdk build --cwd ./tests --profile ${{ matrix.cargo_profile }} --target-arch ${{ matrix.target_triple.arch }}
