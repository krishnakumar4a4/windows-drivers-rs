on:
  push:
  pull_request:
  merge_group:
  schedule: # Trigger a job on default branch at 4AM PST everyday
    - cron: "0 11 * * *"

name: Local Development Makefile

env:
  RUSTFLAGS: -D warnings

jobs:
  build:
    name: Test WDR's local cargo-make Makefile
    strategy:
      fail-fast: false
      matrix:
        runner:
          - windows-latest
          - windows-11-arm

        wdk:
          - Microsoft.WindowsWDK.10.0.22621 # NI WDK

        llvm:
          - 17.0.6
    
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Winget
        uses: ./.github/actions/winget-install
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install LLVM ${{ matrix.llvm }}
        run: |
          # Use native winget.exe instead of PowerShell module for ARM64 compatibility
          Write-Host "Checking for existing LLVM installation..."
          $installedPackages = winget list --id LLVM.LLVM --exact --accept-source-agreements --disable-interactivity 2>$null
          
          # Check if the exact version is already installed
          if ($installedPackages -match "LLVM\.LLVM.*${{ matrix.llvm }}") {
            Write-Host "LLVM ${{ matrix.llvm }} is already installed."
          } else {
            # If any version of LLVM is installed, uninstall it first
            if ($installedPackages -match "LLVM\.LLVM") {
              # Extract and print the existing version
              $existingVersion = ($installedPackages | Select-String "LLVM\.LLVM").Line
              Write-Host "Found existing LLVM installation ($existingVersion). Uninstalling before installing version ${{ matrix.llvm }}..."
              winget uninstall --id LLVM.LLVM --exact --silent --accept-source-agreements --disable-interactivity
              if ($LASTEXITCODE -ne 0) {
                Write-Host "Warning: Failed to uninstall existing LLVM (exit code: $LASTEXITCODE). Continuing with installation..."
              }
            }
            
            Write-Host "Installing LLVM ${{ matrix.llvm }}..."
            winget install --id LLVM.LLVM --version ${{ matrix.llvm }} --source winget --exact --silent --accept-source-agreements --accept-package-agreements --disable-interactivity
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "LLVM installation failed with exit code: $LASTEXITCODE"
              exit 1
            }
          }
          
          # Verify installation
          if (Get-Command clang -ErrorAction SilentlyContinue) {
            clang --version
          } else {
            Write-Host "Warning: clang command not found in PATH after installation"
          }

      - name: Install WDK (${{ matrix.wdk }})
        run: |
          # Use native winget.exe instead of PowerShell module for ARM64 compatibility
          Write-Host "Checking for existing WDK installation..."
          $installedPackages = winget list --id ${{ matrix.wdk }} --exact --accept-source-agreements --disable-interactivity 2>$null
          
          if ($installedPackages -match [regex]::Escape("${{ matrix.wdk }}")) {
            Write-Host "${{ matrix.wdk }} is already installed. Checking for updates..."
            winget upgrade --id ${{ matrix.wdk }} --source winget --exact --silent --accept-source-agreements --accept-package-agreements --disable-interactivity
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "${{ matrix.wdk }} updated successfully."
            } else {
              Write-Host "No updates available for ${{ matrix.wdk }} or update failed (exit code: $LASTEXITCODE)."
            }
          } else {
            Write-Host "Installing ${{ matrix.wdk }}..."
            winget install --id ${{ matrix.wdk }} --source winget --exact --silent --accept-source-agreements --accept-package-agreements --disable-interactivity
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "WDK installation failed with exit code: $LASTEXITCODE"
              exit 1
            }
          }

      - name: Install Nightly Rust Toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt

      - name: Install Beta Rust Toolchain
        uses: dtolnay/rust-toolchain@beta
        with:
          components: clippy

      - name: Install Stable Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install Cargo Make
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-make

      - name: Test wdk-pre-commit-flow cargo-make task
        run: cargo make wdk-pre-commit-flow
